version: "3.9"

services:
  loadbalancer:
    image: swarm-haproxy-loadbalancer
    environment:
      MANAGER_ENDPOINT: http://manager:8080/
      SCRAPE_INTERVAL: "25"
      STARTUP_DELAY: "5"
    ports:
      - 3000:80 # ingress port
      - 4450:4450 # stats page

  manager:
    image: swarm-haproxy-manager
    command: --template templates/haproxy.cfg.template
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:rw
    ports:
      - 8080:8080
    deploy:
      placement:
        constraints:
          # needs to be on a manager node to read the services
          - "node.role==manager"
    labels:
      # if the ingress class is provided the services are filtered by the ingress class
      # otherwise all services are checked
      ingress.class: haproxy
      ingress.global: |
        spread-checks 15
      ingress.defaults: |
        timeout connect 5s
        timeout check 5s
        timeout client 2m
        timeout server 2m
        retries 1
        retry-on all-retryable-errors
        option redispatch 1
      ingress.frontend.default: |
        bind *:80
        # bind *:443 ssl crt /etc/certs/fullchain.pem
        # http-request redirect scheme https unless { ssl_fc }
        option forwardfor except 127.0.0.1
        option forwardfor header X-Real-IP
        http-request disable-l7-retry unless METH_GET

  app_a:
    image: nginx
    deploy:
      replicas: 2
      labels:
        # the ingress class of the manager
        ingress.class: haproxy
        # the application port inside the container,
        # the first private port is used if not specified
        ingress.port: "80"
        # rules are merged with corresponding frontend
        # the service name is used available in go template format
        ingress.frontend.default: |
          default_backend {{ .Name }}
        # backend snippet are added to the backend created from
        # this service definition
        ingress.backend: |
          balance leastconn
          option httpchk GET /
          acl allowed_method method HEAD GET POST
          http-request deny unless allowed_method

  app_b:
    image: nginx
    deploy:
      replicas: 2
      labels:
        ingress.class: haproxy
        ingress.port: "80"
        ingress.frontend.default: |
          use_backend {{ .Name }} if { path -i -m beg /foo/ }
        ingress.backend: |
          balance roundrobin
          option httpchk GET /
          http-request set-path "%[path,regsub(^/foo/,/)]"
