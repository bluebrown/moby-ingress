version: "3.9"
services:
    loadbalancer:
        image: swarm-haproxy-loadbalancer
        environment: 
            MANAGER_ENDPOINT: http://manager:8080/json
            SCRAPE_INTERVAL: '25'
            STARTUP_DELAY: '5'
        ports:
            - 3000:80 # ingress port
            - 4450:4450 # stats page
    manager:
        image: swarm-haproxy-manager
        command: --template /src/haproxy.cfg.template
        volumes: 
            -  /var/run/docker.sock:/var/run/docker.sock
        ports:
            - 8080:8080
        deploy:
            placement:
                constraints:
                    # needs to be on a manager node to read the services
                    - "node.role==manager"
        labels:
            ingress.global: |
                spread-checks 15
                ssl-default-bind-ciphers    ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256
                ssl-default-bind-options    no-sslv3 no-tlsv10 no-tlsv11 no-tls-tickets
                ssl-default-server-ciphers  ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256
                ssl-default-server-options  no-sslv3 no-tlsv10 no-tlsv11 no-tls-tickets
            ingress.defaults: |
                timeout connect 5s
                timeout check 5s
                timeout client 2m
                timeout server 2m
                retries 1
                retry-on all-retryable-errors
                option redispatch 1
            ingress.frontend.default: |
                bind *:80
                # bind *:443 ssl crt /etc/certs/fullchain.pem
                # http-request redirect scheme https unless { ssl_fc }
                option forwardfor except 127.0.0.1
                option forwardfor header X-Real-IP
                http-request disable-l7-retry unless METH_GET
                http-response set-header Cache-Control "max-age=0"
                http-response set-header Strict-Transport-Security "max-age=16000000; includeSubDomains; preload;"
                http-response set-header X-Frame-Options "'none'"
                http-response set-header X-XSS-Protection "1;mode=block"
                http-response set-header X-Content-Type-Options "nosniff"
                http-response set-header X-Permitted-Cross-Domain-Policies "'none'"
                http-response set-header Referrer-Policy "no-referrer-when-downgrade"
                http-response set-header Content-Security-Policy "frame-ancestors 'self'"
                http-response set-header Feature-Policy "fullscreen 'none'; microphone 'none'"
    app:
        image: nginx
        deploy:
            replicas: 2
            labels:
                # the application port inside the container
                ingress.port: "80" 
                # rules are merged with corresponding frontend
                ingress.frontend.default: | 
                    default_backend {{ .Name }} 
                # backend snippet are added to the backend created from
                # this service definition
                ingress.backend: |
                    balance leastconn
                    option httpchk GET /
                    acl allowed_method method HEAD GET POST
                    http-request deny unless allowed_method
    foo:
        image: nginx
        deploy:
            replicas: 2
            labels:
                ingress.port: "80" 
                ingress.frontend.default: |
                    use_backend {{ .Name }} if { path -i -m beg /foo/ }
                ingress.backend: |
                    balance roundrobin
                    option httpchk GET /
                    http-request set-path "%[path,regsub(^/foo/,/)]"
